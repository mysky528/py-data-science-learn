# -*- coding: utf-8 -*-
import numpy as np
#-------------------------------------------------------------------------------
# NumPy中的ndarray对象是一个多维数组对象，该对象由两部分组成
# 1.实际的数据
# 2.描述这些数据的元数据
a = np.arange(5)
print a.dtype,a.shape,a
#-------------------------------------------------------------------------------
# 创建多维数据
m = np.array([np.arange(2),np.arange(2)])
print m.dtype,m.shape,m
#-------------------------------------------------------------------------------
# 选取数据元素
s = np.array([[1,2],[3,4]])
print s[0,0],s[0,1],s[1,0],s[1,1]
#-------------------------------------------------------------------------------
# 数据类型
# 支持的数据类型bool、inti、int8、int16、int32、int64、uint8、uint16、uint32、uint64
# float16(1位表示正负号、5位表示指数、10位表示尾数)、float32(1位表示正负号、8位表示指数、23位表示尾数)、float64(1位表示正负号、11位表示指数、52位表示尾数)
# complex64(复数，分别用两个32位浮点数表示实部和虚部)、complex128
# 使用itemsize获得数据类型在内存中占用的字节数
t = np.arange(7,dtype=np.float32)
print t,t.dtype.itemsize
#-------------------------------------------------------------------------------
# 自定义数据类型
ct = np.dtype([('name',np.str_,40),('numitems',np.int32),('price',np.float32)])
itemz = np.array([('Meaning of life DVD',42,3.14),('Butter',13,2.72)],dtype = ct)
print itemz[1]
#-------------------------------------------------------------------------------
# 一维数组的切片和索引
a = np.arange(9)
print a,' 选取元素3～6:',a[3:7]
print a,' 0~7以2为步长选取元素：',a[:7:2]
print a,' 反转数组：',a[::-1]
#-------------------------------------------------------------------------------
# 多维数组的切片和索引
b = np.arange(24).reshape(2,3,4)
print '改变数组的形状：',b
print b[0,0,0]
print b[:,0,0]
print b[0,1,::2]
print b[...,1]
#-------------------------------------------------------------------------------
# 改变数组的维度
print '用ravel函数完成展平的操作:',b.ravel()
print '与ravel函数的功能相同。不过，flatten函数会请求分配内存来保存结果，而ravel函数只是返回数组的一个视图:',b.flatten()
print '转置矩阵:',b.transpose()
#-------------------------------------------------------------------------------
# 数组的组合
# 水平组合
a = np.arange(9).reshape(3,3)
b = a * 2
print 'a:',a
print 'b:',b
print '水平组合数组：',np.hstack((a,b))
print '使用concatenate函数实现同样的效果：',np.concatenate((a,b),axis=1)
print '垂直组合：',np.vstack((a,b))
print '使用concatenate函数实现同样的效果：',np.concatenate((a,b),axis=0)
#深度组合，就是将一系列数组沿着纵轴(深度)方向进行层叠组合
print '深度组合：',np.dstack((a,b))
#-------------------------------------------------------------------------------
# 分割数组
# 水平分割
print '水平分割数组：',np.hsplit(a,3)
#垂直分割
print '垂直分割：',np.vsplit(a,3)
#深度分割
c = np.arange(27).reshape(3,3,3)
print '数组为：',c
print '进行深度分割为：',np.dsplit(c,3)
#-------------------------------------------------------------------------------
# 数组的属性
print 'ndim属性,给出数组的维度：',b.ndim
print 'size属性,给出数组的元素个数：',b.size
print 'itemsize属性,给出数组所占内存字节数：',b.itemsize
print 'nbytes,给出数组所占内存空间：',b.nbytes
